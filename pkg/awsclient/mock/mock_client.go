// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/awsclient/client.go

// Package mock_awsclient is a generated GoMock package.
package mock_awsclient

import (
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	elbv2 "github.com/aws/aws-sdk-go/service/elbv2"
	route53 "github.com/aws/aws-sdk-go/service/route53"
	gomock "github.com/golang/mock/gomock"
	awsclient "github.com/openshift/cloud-ingress-operator/pkg/awsclient"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DescribeLoadBalancersV2 mocks base method
func (m *MockClient) DescribeLoadBalancersV2(arg0 *elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBalancersV2", arg0)
	ret0, _ := ret[0].(*elbv2.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancersV2 indicates an expected call of DescribeLoadBalancersV2
func (mr *MockClientMockRecorder) DescribeLoadBalancersV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancersV2", reflect.TypeOf((*MockClient)(nil).DescribeLoadBalancersV2), arg0)
}

// DeleteLoadBalancerV2 mocks base method
func (m *MockClient) DeleteLoadBalancerV2(arg0 *elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerV2", arg0)
	ret0, _ := ret[0].(*elbv2.DeleteLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerV2 indicates an expected call of DeleteLoadBalancerV2
func (mr *MockClientMockRecorder) DeleteLoadBalancerV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerV2", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerV2), arg0)
}

// CreateLoadBalancerV2 mocks base method
func (m *MockClient) CreateLoadBalancerV2(arg0 *elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerV2", arg0)
	ret0, _ := ret[0].(*elbv2.CreateLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerV2 indicates an expected call of CreateLoadBalancerV2
func (mr *MockClientMockRecorder) CreateLoadBalancerV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerV2", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancerV2), arg0)
}

// CreateTargetGroupV2 mocks base method
func (m *MockClient) CreateTargetGroupV2(arg0 *elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroupV2", arg0)
	ret0, _ := ret[0].(*elbv2.CreateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetGroupV2 indicates an expected call of CreateTargetGroupV2
func (mr *MockClientMockRecorder) CreateTargetGroupV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroupV2", reflect.TypeOf((*MockClient)(nil).CreateTargetGroupV2), arg0)
}

// RegisterTargetsV2 mocks base method
func (m *MockClient) RegisterTargetsV2(arg0 *elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargetsV2", arg0)
	ret0, _ := ret[0].(*elbv2.RegisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTargetsV2 indicates an expected call of RegisterTargetsV2
func (mr *MockClientMockRecorder) RegisterTargetsV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargetsV2", reflect.TypeOf((*MockClient)(nil).RegisterTargetsV2), arg0)
}

// CreateListenerV2 mocks base method
func (m *MockClient) CreateListenerV2(arg0 *elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenerV2", arg0)
	ret0, _ := ret[0].(*elbv2.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListenerV2 indicates an expected call of CreateListenerV2
func (mr *MockClientMockRecorder) CreateListenerV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerV2", reflect.TypeOf((*MockClient)(nil).CreateListenerV2), arg0)
}

// DescribeTargetGroupsV2 mocks base method
func (m *MockClient) DescribeTargetGroupsV2(arg0 *elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTargetGroupsV2", arg0)
	ret0, _ := ret[0].(*elbv2.DescribeTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTargetGroupsV2 indicates an expected call of DescribeTargetGroupsV2
func (mr *MockClientMockRecorder) DescribeTargetGroupsV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTargetGroupsV2", reflect.TypeOf((*MockClient)(nil).DescribeTargetGroupsV2), arg0)
}

// AddTagsV2 mocks base method
func (m *MockClient) AddTagsV2(arg0 *elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsV2", arg0)
	ret0, _ := ret[0].(*elbv2.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsV2 indicates an expected call of AddTagsV2
func (mr *MockClientMockRecorder) AddTagsV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsV2", reflect.TypeOf((*MockClient)(nil).AddTagsV2), arg0)
}

// ChangeResourceRecordSets mocks base method
func (m *MockClient) ChangeResourceRecordSets(arg0 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeResourceRecordSets", arg0)
	ret0, _ := ret[0].(*route53.ChangeResourceRecordSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeResourceRecordSets indicates an expected call of ChangeResourceRecordSets
func (mr *MockClientMockRecorder) ChangeResourceRecordSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeResourceRecordSets", reflect.TypeOf((*MockClient)(nil).ChangeResourceRecordSets), arg0)
}

// ListHostedZonesByName mocks base method
func (m *MockClient) ListHostedZonesByName(arg0 *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostedZonesByName", arg0)
	ret0, _ := ret[0].(*route53.ListHostedZonesByNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZonesByName indicates an expected call of ListHostedZonesByName
func (mr *MockClientMockRecorder) ListHostedZonesByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZonesByName", reflect.TypeOf((*MockClient)(nil).ListHostedZonesByName), arg0)
}

// DescribeSubnets mocks base method
func (m *MockClient) DescribeSubnets(arg0 *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSubnets", arg0)
	ret0, _ := ret[0].(*ec2.DescribeSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnets indicates an expected call of DescribeSubnets
func (mr *MockClientMockRecorder) DescribeSubnets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnets", reflect.TypeOf((*MockClient)(nil).DescribeSubnets), arg0)
}

// SubnetNameToSubnetIDLookup mocks base method
func (m *MockClient) SubnetNameToSubnetIDLookup(arg0 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetNameToSubnetIDLookup", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetNameToSubnetIDLookup indicates an expected call of SubnetNameToSubnetIDLookup
func (mr *MockClientMockRecorder) SubnetNameToSubnetIDLookup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetNameToSubnetIDLookup", reflect.TypeOf((*MockClient)(nil).SubnetNameToSubnetIDLookup), arg0)
}

// DoesELBExist mocks base method
func (m *MockClient) DoesELBExist(arg0 string) (bool, *awsclient.AWSLoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesELBExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*awsclient.AWSLoadBalancer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoesELBExist indicates an expected call of DoesELBExist
func (mr *MockClientMockRecorder) DoesELBExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesELBExist", reflect.TypeOf((*MockClient)(nil).DoesELBExist), arg0)
}

// ListAllNLBs mocks base method
func (m *MockClient) ListAllNLBs() ([]awsclient.LoadBalancerV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNLBs")
	ret0, _ := ret[0].([]awsclient.LoadBalancerV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNLBs indicates an expected call of ListAllNLBs
func (mr *MockClientMockRecorder) ListAllNLBs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNLBs", reflect.TypeOf((*MockClient)(nil).ListAllNLBs))
}

// DeleteExternalLoadBalancer mocks base method
func (m *MockClient) DeleteExternalLoadBalancer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalLoadBalancer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalLoadBalancer indicates an expected call of DeleteExternalLoadBalancer
func (mr *MockClientMockRecorder) DeleteExternalLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalLoadBalancer", reflect.TypeOf((*MockClient)(nil).DeleteExternalLoadBalancer), arg0)
}

// CreateNetworkLoadBalancer mocks base method
func (m *MockClient) CreateNetworkLoadBalancer(arg0, arg1, arg2 string) ([]awsclient.LoadBalancerV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkLoadBalancer", arg0, arg1, arg2)
	ret0, _ := ret[0].([]awsclient.LoadBalancerV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkLoadBalancer indicates an expected call of CreateNetworkLoadBalancer
func (mr *MockClientMockRecorder) CreateNetworkLoadBalancer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkLoadBalancer", reflect.TypeOf((*MockClient)(nil).CreateNetworkLoadBalancer), arg0, arg1, arg2)
}

// CreateListenerForNLB mocks base method
func (m *MockClient) CreateListenerForNLB(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenerForNLB", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateListenerForNLB indicates an expected call of CreateListenerForNLB
func (mr *MockClientMockRecorder) CreateListenerForNLB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerForNLB", reflect.TypeOf((*MockClient)(nil).CreateListenerForNLB), arg0, arg1)
}

// GetTargetGroupArn mocks base method
func (m *MockClient) GetTargetGroupArn(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroupArn", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetGroupArn indicates an expected call of GetTargetGroupArn
func (mr *MockClientMockRecorder) GetTargetGroupArn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupArn", reflect.TypeOf((*MockClient)(nil).GetTargetGroupArn), arg0)
}

// UpsertARecord mocks base method
func (m *MockClient) UpsertARecord(arg0, arg1, arg2, arg3, arg4 string, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertARecord", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertARecord indicates an expected call of UpsertARecord
func (mr *MockClientMockRecorder) UpsertARecord(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertARecord", reflect.TypeOf((*MockClient)(nil).UpsertARecord), arg0, arg1, arg2, arg3, arg4, arg5)
}
